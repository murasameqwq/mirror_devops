include:
  - template: SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml

gemnasium-maven-dependency_scanning:  # 依赖检查
  tags: [ docker ]

semgrep-sast:  # 静态安全检查
  tags: [ docker ]
stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  
build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - chmod +x mvnw
    - ./mvnw compile

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - chmod +x mvnw
    - ./mvnw test


# code-quality:
#   stage: test
#   image: docker:20.10.12
#   allow_failure: false
#   services:
#     - name: 'docker:20.10.12-dind'
#       command: ['--tls=false', '--host=tcp://0.0.0.0:2375']
#   variables:
#     HTTP_PROXY: "http://127.0.0.1:12334"
#     HTTPS_PROXY: "http://127.0.0.1:12334"
#     NO_PROXY: "localhost,127.0.0.1,.nju.edu.cn,.gitlab.cn,tcr-fvoluck9-1303695223.cos.ap-shanghai.myqcloud.com"  # 根据需要修改
#     DOCKER_HOST: "localhost:2375"
#     DOCKER_DRIVER: overlay2
#     DOCKER_CERT_PATH: ""
#     DOCKER_TLS_CERTDIR: ""
#     DOCKER_TLS_VERIFY: ""
#     CODE_QUALITY_IMAGE_TAG: "0.96.0"
#     CODE_QUALITY_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/ci-cd/codequality:$CODE_QUALITY_IMAGE_TAG"
#     DOCKER_SOCKET_PATH: /var/run/docker.sock
#   needs: []
#   script:
#     - export SOURCE_CODE=$PWD
#     - |
#       if ! docker info &>/dev/null; then
#         if [ -z "$DOCKER_HOST" ] && [ -n "$KUBERNETES_PORT" ]; then
#           export DOCKER_HOST='tcp://localhost:2375'
#         fi
#       fi
#     - | # this is required to avoid undesirable reset of Docker image ENV variables being set on build stage
#       function propagate_env_vars() {
#         CURRENT_ENV=$(printenv)

#         for VAR_NAME; do
#           echo $CURRENT_ENV | grep "${VAR_NAME}=" > /dev/null && echo "--env $VAR_NAME "
#         done
#       }
#     - |
#       if [ -n "$CODECLIMATE_REGISTRY_USERNAME" ] && [ -n "$CODECLIMATE_REGISTRY_PASSWORD" ] && [ -n "$CODECLIMATE_PREFIX" ]; then
#         CODECLIMATE_REGISTRY=${CODECLIMATE_PREFIX%%/*}
#         docker login "$CODECLIMATE_REGISTRY" --username "$CODECLIMATE_REGISTRY_USERNAME" --password "$CODECLIMATE_REGISTRY_PASSWORD"
#       fi
#     - docker pull --quiet "$CODE_QUALITY_IMAGE"
#     - docker info
#     - |
#       docker run --rm \
#         $(propagate_env_vars \
#           SOURCE_CODE \
#           TIMEOUT_SECONDS \
#           CODECLIMATE_DEBUG \
#           CODECLIMATE_DEV \
#           REPORT_STDOUT \
#           REPORT_FORMAT \
#           ENGINE_MEMORY_LIMIT_BYTES \
#           CODECLIMATE_PREFIX \
#           CODECLIMATE_REGISTRY_USERNAME \
#           CODECLIMATE_REGISTRY_PASSWORD \
#           DOCKER_SOCKET_PATH \
#         ) \
#         --volume "$PWD":/code \
#         --volume "$DOCKER_SOCKET_PATH":/var/run/docker.sock \
#         "$CODE_QUALITY_IMAGE" /code
#     - cat gl-code-quality-report.json
#     - |
#       if grep "issue" gl-code-quality-report.json
#       then
#         echo "Test fail"
#         exit 1
#       else
#         echo "Test success"
#         exit 0
#       fi
#   artifacts:
#     reports:
#       codequality: gl-code-quality-report.json
#     paths:
#       - gl-code-quality-report.json
#     expire_in: 1 week
#   dependencies: []
#   rules:
#     - if: '$CODE_QUALITY_DISABLED'
#       when: never
#     - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - sshpass -p "Zyy20220722" scp -o StrictHostKeyChecking=no target/demo-0.0.1-SNAPSHOT.jar root@172.29.4.136:~
    - sshpass -p "Zyy20220722" ssh -o StrictHostKeyChecking=no root@172.29.4.136 "killall java; screen -d -m java -jar demo-0.0.1-SNAPSHOT.jar"

